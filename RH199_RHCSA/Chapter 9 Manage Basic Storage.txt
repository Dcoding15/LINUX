Mount and Unmount File System: -
-----------------------------
	1. For accessing file system, we have to mount that storage device.
	2. Mounting a storage device in file system can be done using mount command.
	3. mount command can use in 2 ways: -
		(a) with device file name i.e., file name stored in /dev directory.
		(b) with UUID (Universal Unique Identifier of the Device).
	   Also adding any mount point at end i.e., any user made directory.
	4. Before mount we must first create out own directory within /mnt ( used for temporary mount point).
	5. Kill all the processes related to specified mount point before unmounting a storage device from file system.

To list details of all available block devices						-> lsblk
To list details of specified block device							-> lsblk /dev/[ storage name ]
To display detail information of all available block devices		-> lsblk -f
To display detail information of specified block devices			-> lsblk -f /dev/[ storage name ]
To display open files and running process on specified mount point	-> lsof [ directory path name ]
To mount storage using storage name on file system					-> mount /dev/[ storage name ] /mnt/[ directory path name ]
To mount storage using UUID on file system							-> mount UUID="" /mnt/[ directory path name ]
To unmount storage from file system									-> umount /mnt/[ directory path name ]

Partitions, File System and Persistent Mounts: -
---------------------------------------------
	1. MBR (Master Boot Record): -
		(a) This partitioning scheme is standard for BIOS (Basic Input / Output System) firmware.
		(b) It supports four primary partition and one extended partition (which can be divided into many logical partition).
	2. GPT (GUID Partition Table): -
		(a) This partitioning scheme is standard for UEFI (Unified Extensible Firmware Interface) firmware.
		(b) It supports 128 partitions.
		(c) GPT uses GUID (Globally Unique Identifier) to identify each partition of a disk.
		(d) It has primary GPT located at header and secondary GPT located at end of disk.
		(e) It uses checksum to detect error at GPT header and partition table.
	3. To make partion with parted command syntax: parted /dev/[ storage name ] [ options ]
	4. Type of partitioning scheme table: -
		(a) aix		-> IBM's AIX OS
		(b) amiga	-> AMIGA OS
		(c) bsd		-> BSD based OS and SunOS
		(d) dvh		-> WINDOWS OS
		(e) gpt		-> WINDOWS OS / MacOS / LINUX OS
		(f) loop	-> LINUX OS (use to manage loopback devices)
		(g) mac		-> MacOS
		(h) msdos	-> WINDOWS OS / LINUX OS (MBR partitioning scheme)
		(i) pc98	-> NEC PC-98 series of personal computers like MS-DOS 6.x, WINDOWS 3.x, WINDOWS 95.
		(j) sun		-> Sun Mirosystem's workstation and server and Solaris OS.
	5. Type of partitions: -
		(a) primary		-> Host operating system and system's boot loader. This parition has limit of how many could be created.
		(b) logical		-> Created from division of extended partition and only use to store data.
		(c) extendend	-> Special partition that acts as a container for logical partitions.
	6. Types of filesystem: -
		(a) btrfs			-> B-tree file system based on copy on write principle ( linux file system )
		(b) ext2			-> 2nd Extended File System ( linux file system )
		(c) ext3			-> 3rd Extended File System ( linux file system )
		(d) ext4			-> 4th Extended File System ( linux file system )
		(e) fat16			-> 16 bit File Allocation Table ( window file system )
		(f) fat32			-> 32 bit File Allocation Table	( window file system )
		(g) hfs				-> Hierarchical File System          ( macos file system )
		(i) hfs+			-> Hierarchical File System eXtended ( macos file system )
		(j) linux-swap		-> Swap file allow secondary storage acts as primary storage i.e., RAM ( linux file system )
		(k) ntfs			-> New Technology File System ( window file system )
		(l) reiserfs		-> General purpose journaling file system ( linux file system )
		(m) udf				-> Universal Disk Format which provides access to recordable media such as CD, DVD.
		(n) xfs				-> eXtensible File System which provides high performance 64-bit journaling file system.
	7. Types of flags: -
		(a) boot				-> partition used as either BIOS or UEFI boot loader.
		(b) root				-> partition used as storage of OS files and its dependencies. Also storing root user data.
		(c) swap				-> partition used as primary storage.
		(d) hidden				-> partition used as hidden storage and can't display using commands like df or lsblk.
		(e) raid				-> partition used as RAID level to enhance data redundancy and performance.
		(f) lvm					-> partition used as LVM volumes allowing for flexible disk space management and allocation.
		(g) lba					-> partition used as accessing disk in linear addressing scheme rather than cylinder head sector addressing.
		(h) legacy_boot			-> partition used as legacy BIOS boot loader.
		(i) irst				-> partition used as IRST volume which provide RAID and disk management capabilities.
		(j) nsftres				-> partition used as netware storage format reserve specific storage.
		(k) esp					-> partition used as storing EFI boot loader, device drivers, system utilities ( use only UEFI boot loader ).
		(l) chromeos_kernel		-> partition used as storage related to chrome OS files and its dependencies.
		(m) bls_boot			-> partition used as storage for boot loader specifications.
		(n) linux-home			-> partition used as storage for user data except root user.
		(o) no_automount		-> partition used as storage for sensetive information which are not intended for regular use and require manual mounting.
		(p) bios_grub			-> partition used as GRUB (GRand Unified Bootloader) boot code and require of BIOS-based system.
		(q) palo				-> partition used as boot loader for PA-RISC systems and HP Unix.
	8. Partition name only requires for gpt, mac, pc98.

To display information related to block device			-> parted /dev/[ storage name ] print
To create new disk lable								-> parted /dev/[ storage name ] mklable [ label name ]
To remove partition from disk							-> parted /dev/[ storage name ] rm [ partition number ]
To create new partition									-> parted /dev/[ storage name ] mkpart [ partition type ] [ partition name ] [ partition flag ] [ start size ] [ end size ]
To check alignment contraints of partitions				-> parted /dev/[ storage name ] align-check [ minimal | optimal ] [ partition number ]
To name partition explicitly							-> parted /dev/[ storage name ] name [ partition number ] [ partition name ]
